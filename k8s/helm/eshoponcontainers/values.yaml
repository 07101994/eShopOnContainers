# Default values for eshoponcontainers.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: nginx
  tag: stable
  pullPolicy: IfNotPresent

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: false
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  path: /
  hosts:
    - chart-example.local
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #  cpu: 100m
  #  memory: 128Mi
  # requests:
  #  cpu: 100m
  #  memory: 128Mi

nodeSelector: {}

tolerations: []

affinity: {}

global:
  app:                                                  # app global settings
    name: "my-eshop"                                    # Override for custom app name
    ingress:                                            # ingress related settings
      suffix: false                                     # if true ingress endpoints are suffixed with .Values.appName value (or .Release.Name if the 1st do not exist)
      entries:
        basket: basket-api                              # ingress entry for basket api
        catalog: catalog-api                            # ingress entry for catalog api
        ordering: ordering-api                          # ingress entry for ordering api
        identity: identity                              # ingress entry for identity api
        mvc: webmvc                                     # ingress entry for web mvc
        spa: webspa                                     # ingress entry for web spa
        status: webstatus                               # ingress entry for web status
        webshoppingapigw: webshoppingapigw              # ingress entry for web shopping Agw
        webmarketingapigw: webmarketingapigw            # ingress entry for web mkg Agw
        mobilemarketingapigw: mobilemarketingapigw      # ingress entry for mobile mkg Agw
        mobileshoppingapigw: mobileshoppingapigw        # ingress entry for mobile shopping Agw
        webshoppingagg: webshoppingagg                  # ingress entry for web shopping aggregator
        mobileshoppingagg: mobileshoppingagg            # ingress entry for mobile shopping aggregator
        payment: payment-api                            # ingress entry for payment api
        locations: locations-api                        # ingress entry for locations api
        marketing: marketing-api                        # ingress entry for marketing api
  inf:
    sql:                      # inf.sql defines the sql server databases & logins
#    host:  my-sql-server     # Uncomment to specify a custom sql-server to be used. By default "sql-data-<appname>" will be used
      catalog:                # inf.sql.catalog: settings for the catalog-api sql (user, pwd, db)
        user: sa              # Catalog API SQL user
        pwd: Pass@word        # Catalog API SQL pwd
        db: CatalogDb         # Catalog API SQL db name
      ordering:               # inf.sql.ordering: settings for the ordering-api sql (user, pwd, db)
        user: sa              # Ordering API SQL user
        pwd: Pass@word        # Ordering API SQL pwd
        db: OrderingDb        # Ordering API SQL db name
      identity:
        user: sa              # Ordering API SQL user
        pwd: Pass@word        # Ordering API SQL pwd
        db: IdentityDb        # Ordering API SQL db name
    redis:                    # inf.redis defines the redis' connection strings
      basket:                 
        constr: basket-data   # Connection string to Redis used by Basket API
      keystore:
        constr: keystore-data # Connection string to Redis used as a Keystore (by Identity API)
    eventbus:
      constr: rabbitmq        # Event bus connection strin g
      useAzure: false         # true if use Azure Service Bus. False if RabbitMQ
    appinsights:
        key: ""               # App insights to use
    k8s:                      # inf.k8s defines Kubernetes cluster global config
      dns:  ""                # k8s external IP or DNS. Value MUST BE PROVIDED using --set (--set inf.k8s.dns=my-cluster-dns)
    misc:                     # inf.misc contains miscellaneous configuration related to infrastructure
      useLoadTest: false      # If running under loading test or not
      useAzureStorage: false  # If catalog api uses azure storage or not
